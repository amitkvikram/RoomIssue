public void issue(){
        //prepare data;
        for(int i = 0; i<100000; i++){
            data1.add(data1.get(i%39));
        }

        //data.size() = 100040

        disposable.add(Completable.fromRunnable(()->{
                Log.v("Room:Insertion", "Started");
                ForecastDatabase.getsInstance(getApplicationContext())
                        .forecastTaskDao().insertList(data1);
        })
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribeWith(new DisposableCompletableObserver() {
            @Override
            public void onComplete() {
                Log.v("Room:Insertion", "Completed");
                ReadAfterWriting();
            }

            @Override
            public void onError(Throwable e) {
                Log.v("Room:Insertion", "onError");
            }
        }));

        ReadWithWrite();
    }

    public void ReadWithWrite(){
        //Long reading
        disposable.add(Single.fromCallable(()->{
                Log.v("Room:ReadWithWrite", "Started");
                //CHANGE COMPARED TO PHASE1:WRAPPING READ IN TRANSACTION
                List<ForecastDataEntry> temp;
                ForecastDatabase.getsInstance(getApplicationContext()).beginTransaction();
                temp = ForecastDatabase.getsInstance(getApplicationContext())
                        .forecastTaskDao().loadAllData1();
                ForecastDatabase.getsInstance(getApplicationContext()).setTransactionSuccessful();
                ForecastDatabase.getsInstance(getApplicationContext()).endTransaction();
                return temp;
        })
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribeWith(new DisposableSingleObserver<List<ForecastDataEntry>>(){
            @Override
            public void onSuccess(List<ForecastDataEntry> forecastDataEntries) {
                Log.v("Room:ReadWithWrite", "RowsRead = "+forecastDataEntries.size());
            }

            @Override
            public void onError(Throwable e) {
                Log.v("Room:ReadWithWrite", "onError");
            }
        }));
    }

    public void ReadAfterWriting(){
        //Long reading
        disposable.add(Single.fromCallable(()->{
            Log.v("Room:ReadAfterWriting", "Started");
            return ForecastDatabase.getsInstance(getApplicationContext())
                    .forecastTaskDao().loadAllData1();
        })
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribeWith(new DisposableSingleObserver<List<ForecastDataEntry>>(){
            @Override
            public void onSuccess(List<ForecastDataEntry> forecastDataEntries) {
                Log.v("Room:ReadAfterWriting", "Rows Read = "+forecastDataEntries.size());
            }

            @Override
            public void onError(Throwable e) {
                Log.v("Room:ReadAfterWriting", "onError");
            }
        }));
    }
